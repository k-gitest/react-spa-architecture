generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  }

model User {
  id      String   @id @db.Uuid
  memos   Memo[]
  profile Profile?
  categories Category[]
  tags    Tag[]
  images  Image[]

  @@map("users")
}

model Profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @unique @db.Uuid
  avatar     String?
  user_name  String?  @unique
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Memo {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  title      String   @db.VarChar(100)
  content    String
  importance String
  category   MemoCategory[]
  tags       MemoTag[]
  images     MemoImage[]
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("memos")
}

model Category {
  id      Int            @id @default(autoincrement())
  name    String         @db.VarChar(50)
  user_id  String         @db.Uuid
  user    User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  memo_categories MemoCategory[]
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([user_id, name])
  @@map("categories")
}

model MemoCategory {
  memo_id     String   @db.Uuid
  memo        Memo     @relation(fields: [memo_id], references: [id], onDelete: Cascade)
  category_id Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([memo_id, category_id])
  @@map("memo_categories")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(50)
  memos      MemoTag[]
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([user_id, name])
  @@map("tags")
}

model MemoTag {
  memo_id   String @db.Uuid
  memo     Memo   @relation(fields: [memo_id], references: [id], onDelete: Cascade)
  tag_id    Int
  tag      Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([memo_id, tag_id])
  @@map("memo_tags")
}

model Image {
  id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  user_id String @db.Uuid
  storage_object_id String? @db.Uuid
  file_path String
  file_name String
  file_size Int?
  mime_type String?
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  memo_images MemoImage[]
  
  @@map("images")
}

model MemoImage {
  memo_id String @db.Uuid
  image_id String @db.Uuid
  order Int @default(0)
  alt_text String?
  description String?
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  
  memo Memo @relation(fields: [memo_id], references: [id], onDelete: Cascade)
  image Image @relation(fields: [image_id], references: [id], onDelete: Cascade)
  
  @@id([memo_id, image_id])
  @@map("memo_images")
}

model CleanupDeleteImage {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filePath     String    @map("file_path")
  fileName     String    @map("file_name")
  userId       String    @map("user_id")
  errorMessage String?   @map("error_message")
  resolved     Boolean   @default(false)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@map("cleanup_delete_images")
}