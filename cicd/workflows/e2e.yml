name: E2E Tests

on:
  pull_request:
    branches: [dev, main]
  push:
    branches: [dev, main]

env:
  PRISMA_VERSION: '6.7.0'

jobs:
  e2e:
    runs-on: ubuntu-latest
    # テスト用環境変数をgithub environments secretsから取得
    environment: ${{ github.base_ref == 'main' && 'test-prod' || 'test-dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Set Prisma version
        run: echo "PRISMA_VERSION=${{ env.PRISMA_VERSION }}" >> $GITHUB_ENV

      - name: Cache Prisma client
        uses: actions/cache@v4
        # schema.prismaに変更がない限りキャッシュを再利用
        id: prisma-cache
        with:
          path: node_modules/.prisma
          key: prisma-${{ env.PRISMA_VERSION }}-${{ hashFiles('prisma/schema.prisma') }}

      - name: Setup Deno for Prisma
        # schema.prisma に変更があった場合のみ生成
        if: steps.prisma-cache.outputs.cache-hit != 'true'
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.2.5'

      - name: Generate Deno Prisma client
        # schema.prisma に変更があった場合のみ生成
        if: steps.prisma-cache.outputs.cache-hit != 'true'
        run: deno run -A --unstable-detect-cjs npm:prisma@${{ env.PRISMA_VERSION }} generate --no-engine

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        # playwrightのブラウザをキャッシュして実行時間を短縮
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright system dependencies only
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Build Application
        uses: ./.github/actions/build-app
        with: # テスト用環境変数は_TESTとつけている
          supabase-url: ${{ secrets.VITE_SUPABASE_URL_TEST }}
          supabase-anon-key: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_TEST }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_TEST }}
          PLAYWRIGHT_TEST_EMAIL: ${{ secrets.PLAYWRIGHT_TEST_EMAIL }}
          PLAYWRIGHT_TEST_PASSWORD: ${{ secrets.PLAYWRIGHT_TEST_PASSWORD }}
          MAILTRAP_API_KEY: ${{ secrets.MAILTRAP_API_KEY }}

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        # テスト失敗時のレポート作成
        if: failure()
        with:
          name: playwright-report-${{ github.sha }}
          path: playwright-report/
          retention-days: 30

      - name: Upload VRT screenshots
        uses: actions/upload-artifact@v4
        # テスト失敗時のスクリーンショット保存
        if: failure()
        with:
          name: vrt-screenshots-${{ github.sha }}
          path: test-results/
          retention-days: 30