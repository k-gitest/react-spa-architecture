name: CI/CD Workflow

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "e2e/**"
      - "prisma/**"
      - "supabase/**"
      - "package*.json"
      - "vite.config.*"
      - "playwright.config.*"
      - "tsconfig*.json"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  DENO_VERSION: 'v2.2.5'

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript type check
        run: npm run typecheck

      # Edge Functions の Lint & Type Check
      - name: Setup Deno for Edge Functions
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Lint Edge Functions
        run: deno lint supabase/functions/

      - name: Type check Edge Functions
        run: deno check supabase/functions/**/*.ts

  unit-test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup test database
        run: npx prisma db push --accept-data-loss
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      - name: Run unit tests
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/

  e2e-test:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: [lint]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local
        run: supabase start
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          # テスト用環境変数ファイルを作成
          echo "VITE_SUPABASE_URL=http://localhost:54321" > .env.test
          echo "VITE_SUPABASE_ANON_KEY=$(supabase status -o env | grep ANON_KEY | cut -d= -f2)" >> .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb" >> .env.test

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Stop Supabase
        if: always()
        run: supabase stop

  # Edge Functions のテスト（独立して実行）
  edge-functions-test:
    name: Edge Functions Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Test Edge Functions
        run: deno test --allow-all supabase/functions/
        working-directory: ./

      - name: Test tRPC routes
        run: deno test --allow-all supabase/functions/trpc/
        if: hashFiles('supabase/functions/trpc/**') != ''

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-test, e2e-test, edge-functions-test]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      # tRPC 型生成の問題対策（READMEで言及されている問題）
      - name: Generate tRPC types
        run: |
          # 共通型ディレクトリに tRPC 型を生成
          mkdir -p src/types/generated
          # ここで tRPC 型を生成するスクリプトを実行
          npm run generate:trpc-types || echo "tRPC type generation skipped"
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # セキュリティチェック
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate
        continue-on-error: true

  # ステージング環境へのデプロイ
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy Edge Functions to Staging
        run: |
          supabase functions deploy --project-ref ${{ secrets.STAGING_SUPABASE_PROJECT_REF }} --no-verify-jwt
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Apply database migrations to Staging
        run: |
          supabase db push --project-ref ${{ secrets.STAGING_SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy frontend to Staging
        run: |
          # Vercel, Netlify, AWS S3 等へのデプロイ
          npm run deploy:staging
        env:
          DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}

  # プロダクション環境へのデプロイ
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # プロダクションデプロイ前のバックアップ
      - name: Backup production database
        run: |
          supabase db dump --project-ref ${{ secrets.PROD_SUPABASE_PROJECT_REF }} > backup.sql
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Upload database backup
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-${{ github.sha }}
          path: backup.sql
          retention-days: 30

      - name: Deploy Edge Functions to Production
        run: |
          supabase functions deploy --project-ref ${{ secrets.PROD_SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Apply database migrations to Production
        run: |
          supabase db push --project-ref ${{ secrets.PROD_SUPABASE_PROJECT_REF }} --include-all
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy frontend to Production
        run: |
          # 本番環境へのフロントエンドデプロイ
          npm run deploy:production
        env:
          DEPLOY_TOKEN: ${{ secrets.PROD_DEPLOY_TOKEN }}

      - name: Health check
        run: |
          # デプロイ後のヘルスチェック
          curl -f ${{ secrets.PROD_APP_URL }}/health || exit 1
        timeout-minutes: 5

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment completed successfully"
          # Slack/Discord 通知等をここに追加

      - name: Rollback notification
        if: failure()
        run: |
          echo "❌ Production deployment failed - manual intervention required"
          # 緊急時通知をここに追加